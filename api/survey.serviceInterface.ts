/**
 * Appointment Decision System API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';


import { AppointmentSuggestionReply } from '../model/appointmentSuggestionReply';
import { AppointmentSuggestionReplySaveRequest } from '../model/appointmentSuggestionReplySaveRequest';
import { Survey } from '../model/survey';
import { SurveyAppointmentSuggestionReplyListResponse } from '../model/surveyAppointmentSuggestionReplyListResponse';
import { SurveyCreateRequest } from '../model/surveyCreateRequest';
import { SurveyFinalizeRequest } from '../model/surveyFinalizeRequest';
import { SurveyListResponse } from '../model/surveyListResponse';
import { SurveyUpdateRequest } from '../model/surveyUpdateRequest';


import { Configuration }                                     from '../configuration';


export interface SurveyServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    

    /**
    * Create a new survey for authenticated user
    * 
    * @param body The survey to create
    */
    createSurvey(body: SurveyCreateRequest, extraHttpRequestParams?: any): Observable<Survey>;

    /**
    * Delete one survey with id for by authenticated user
    * 
    * @param surveyId The id of the survey
    */
    deleteSurvey(surveyId: number, extraHttpRequestParams?: any): Observable<{}>;

    /**
    * Finalize a survey by survey creator
    * 
    * @param surveyId The id of the survey
    * @param body 
    */
    finalizeSurvey(surveyId: number, body?: SurveyFinalizeRequest, extraHttpRequestParams?: any): Observable<Survey>;

    /**
    * Find all surveys for the authenticated user
    * 
    */
    findSurveys(extraHttpRequestParams?: any): Observable<SurveyListResponse>;

    /**
    * Get one survey by id for the authenticated user
    * 
    * @param surveyId The id of the survey
    */
    getSurvey(surveyId: number, extraHttpRequestParams?: any): Observable<Survey>;

    /**
    * Get all replies for a survey appointment suggestion for authenticated user
    * 
    * @param surveyId The id of the survey
    * @param appointmentSuggestionId The id of an appointment suggestion
    */
    getSurveyAppointmentSuggestionReplies(surveyId: number, appointmentSuggestionId: number, extraHttpRequestParams?: any): Observable<SurveyAppointmentSuggestionReplyListResponse>;

    /**
    * Reply to an appointment suggestion
    * 
    * @param body The reply to the appointment suggestion
    * @param surveyId The id of the survey
    * @param appointmentSuggestionId The id of an appointment suggestion
    */
    replyToAppointmentSuggestion(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, extraHttpRequestParams?: any): Observable<AppointmentSuggestionReply>;

    /**
    * Update an appointment suggestion reply
    * 
    * @param body The reply to the appointment suggestion
    * @param surveyId The id of the survey
    * @param appointmentSuggestionId The id of an appointment suggestion
    */
    updateAppointmentSuggestionReply(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, extraHttpRequestParams?: any): Observable<AppointmentSuggestionReply>;

    /**
    * Update one survey with id for the authenticated user
    * 
    * @param body The survey to update
    * @param surveyId The id of the survey
    */
    updateSurvey(body: SurveyUpdateRequest, surveyId: number, extraHttpRequestParams?: any): Observable<Survey>;

}
