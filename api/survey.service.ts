/**
 * Appointment Decision System API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AppointmentSuggestionReply } from '../model/appointmentSuggestionReply';
import { AppointmentSuggestionReplySaveRequest } from '../model/appointmentSuggestionReplySaveRequest';
import { Survey } from '../model/survey';
import { SurveyAppointmentSuggestionReplyListResponse } from '../model/surveyAppointmentSuggestionReplyListResponse';
import { SurveyCreateRequest } from '../model/surveyCreateRequest';
import { SurveyFinalizeRequest } from '../model/surveyFinalizeRequest';
import { SurveyListResponse } from '../model/surveyListResponse';
import { SurveyUpdateRequest } from '../model/surveyUpdateRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { SurveyServiceInterface }                            from './survey.serviceInterface';


@Injectable()
export class SurveyService implements SurveyServiceInterface {

    protected basePath = 'https://virtserver.swaggerhub.com/Moritz-Hoeppner/Terminio/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new survey for authenticated user
     * 
     * @param body The survey to create
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createSurvey(body: SurveyCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<Survey>;
    public createSurvey(body: SurveyCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Survey>>;
    public createSurvey(body: SurveyCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Survey>>;
    public createSurvey(body: SurveyCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createSurvey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Survey>('post',`${this.basePath}/survey`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete one survey with id for by authenticated user
     * 
     * @param surveyId The id of the survey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSurvey(surveyId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSurvey(surveyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSurvey(surveyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSurvey(surveyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling deleteSurvey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finalize a survey by survey creator
     * 
     * @param surveyId The id of the survey
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public finalizeSurvey(surveyId: number, body?: SurveyFinalizeRequest, observe?: 'body', reportProgress?: boolean): Observable<Survey>;
    public finalizeSurvey(surveyId: number, body?: SurveyFinalizeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Survey>>;
    public finalizeSurvey(surveyId: number, body?: SurveyFinalizeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Survey>>;
    public finalizeSurvey(surveyId: number, body?: SurveyFinalizeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling finalizeSurvey.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Survey>('post',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}/finalize`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find all surveys for the authenticated user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findSurveys(observe?: 'body', reportProgress?: boolean): Observable<SurveyListResponse>;
    public findSurveys(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SurveyListResponse>>;
    public findSurveys(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SurveyListResponse>>;
    public findSurveys(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SurveyListResponse>('get',`${this.basePath}/survey`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get one survey by id for the authenticated user
     * 
     * @param surveyId The id of the survey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurvey(surveyId: number, observe?: 'body', reportProgress?: boolean): Observable<Survey>;
    public getSurvey(surveyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Survey>>;
    public getSurvey(surveyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Survey>>;
    public getSurvey(surveyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling getSurvey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Survey>('get',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all replies for a survey appointment suggestion for authenticated user
     * 
     * @param surveyId The id of the survey
     * @param appointmentSuggestionId The id of an appointment suggestion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSurveyAppointmentSuggestionReplies(surveyId: number, appointmentSuggestionId: number, observe?: 'body', reportProgress?: boolean): Observable<SurveyAppointmentSuggestionReplyListResponse>;
    public getSurveyAppointmentSuggestionReplies(surveyId: number, appointmentSuggestionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SurveyAppointmentSuggestionReplyListResponse>>;
    public getSurveyAppointmentSuggestionReplies(surveyId: number, appointmentSuggestionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SurveyAppointmentSuggestionReplyListResponse>>;
    public getSurveyAppointmentSuggestionReplies(surveyId: number, appointmentSuggestionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling getSurveyAppointmentSuggestionReplies.');
        }

        if (appointmentSuggestionId === null || appointmentSuggestionId === undefined) {
            throw new Error('Required parameter appointmentSuggestionId was null or undefined when calling getSurveyAppointmentSuggestionReplies.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SurveyAppointmentSuggestionReplyListResponse>('get',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}/appointment_suggestion/${encodeURIComponent(String(appointmentSuggestionId))}/replies`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Reply to an appointment suggestion
     * 
     * @param body The reply to the appointment suggestion
     * @param surveyId The id of the survey
     * @param appointmentSuggestionId The id of an appointment suggestion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public replyToAppointmentSuggestion(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe?: 'body', reportProgress?: boolean): Observable<AppointmentSuggestionReply>;
    public replyToAppointmentSuggestion(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AppointmentSuggestionReply>>;
    public replyToAppointmentSuggestion(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AppointmentSuggestionReply>>;
    public replyToAppointmentSuggestion(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling replyToAppointmentSuggestion.');
        }

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling replyToAppointmentSuggestion.');
        }

        if (appointmentSuggestionId === null || appointmentSuggestionId === undefined) {
            throw new Error('Required parameter appointmentSuggestionId was null or undefined when calling replyToAppointmentSuggestion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AppointmentSuggestionReply>('post',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}/appointment_suggestion/${encodeURIComponent(String(appointmentSuggestionId))}/reply`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an appointment suggestion reply
     * 
     * @param body The reply to the appointment suggestion
     * @param surveyId The id of the survey
     * @param appointmentSuggestionId The id of an appointment suggestion
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAppointmentSuggestionReply(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe?: 'body', reportProgress?: boolean): Observable<AppointmentSuggestionReply>;
    public updateAppointmentSuggestionReply(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AppointmentSuggestionReply>>;
    public updateAppointmentSuggestionReply(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AppointmentSuggestionReply>>;
    public updateAppointmentSuggestionReply(body: AppointmentSuggestionReplySaveRequest, surveyId: number, appointmentSuggestionId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAppointmentSuggestionReply.');
        }

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling updateAppointmentSuggestionReply.');
        }

        if (appointmentSuggestionId === null || appointmentSuggestionId === undefined) {
            throw new Error('Required parameter appointmentSuggestionId was null or undefined when calling updateAppointmentSuggestionReply.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AppointmentSuggestionReply>('put',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}/appointment_suggestion/${encodeURIComponent(String(appointmentSuggestionId))}/reply`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update one survey with id for the authenticated user
     * 
     * @param body The survey to update
     * @param surveyId The id of the survey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateSurvey(body: SurveyUpdateRequest, surveyId: number, observe?: 'body', reportProgress?: boolean): Observable<Survey>;
    public updateSurvey(body: SurveyUpdateRequest, surveyId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Survey>>;
    public updateSurvey(body: SurveyUpdateRequest, surveyId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Survey>>;
    public updateSurvey(body: SurveyUpdateRequest, surveyId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateSurvey.');
        }

        if (surveyId === null || surveyId === undefined) {
            throw new Error('Required parameter surveyId was null or undefined when calling updateSurvey.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Survey>('put',`${this.basePath}/survey/${encodeURIComponent(String(surveyId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
